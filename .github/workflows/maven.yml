name: CI/CD Spring Boot to Azure Kubernetes Service

on: 
  workflow_dispatch:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

jobs:
  test:
    name: Unit Test and SpotBugs
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'microsoft'
          cache: 'maven'
      ## Unit test and SBOM generation is carried out in 'mvn package', and SpotBugs report is generated in 'mvn site'
      - name: Build with Maven
        run: mvn -B clean package site
      - name: Upload SBOM(Cyclonedx)
        uses: actions/upload-artifact@v3
        with:
          name: bom.json
          path: './target/bom.json'
      - name: Upload SpotBugs Report
        uses: actions/upload-artifact@v3
        with:
          name: spotbugs-site
          path: './target/site/'
  scan:
    name: Scan dependencies with Trivy
    needs: test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Install latest Trivy CLI
        run: |
          wget https://github.com/aquasecurity/trivy/releases/download/v0.41.0/trivy_0.41.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.41.0_Linux-64bit.deb
      - uses: actions/download-artifact@v3
        with:
          name: bom.json
      - name: Run Trivy with SBOM
        run: trivy sbom ./bom.json

  container:
    name: Build container with CNB and push to ACR
    needs: scan
    runs-on: ubuntu-latest

    outputs:
      LOGINSERVER: ${{ steps.image.outputs.LOGINSERVER }}
      IMAGE: ${{ steps.versioning.outputs.IMAGE }}

    steps:
      - uses: actions/checkout@v3

      - name: 'Az CLI Login'
        uses: azure/login@v1
          - uses: Azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          client-secret: ${{ secrets.CLIENT_SECRET }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      ##- name: Azure CLI Login
      ##  run: |
      ##  az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: ACR Login with AZ CLI
        id: image
        run: |
          ACR_JSON=$(az acr login --name acrjay --expose-token)
          TOKEN=$(echo $ACR_JSON | jq -r .accessToken)
          LOGINSERVER=$(echo $ACR_JSON | jq -r .loginServer)
          echo "LOGINSERVER=$LOGINSERVER" >> $GITHUB_ENV
          echo "LOGINSERVER=$LOGINSERVER" >> $GITHUB_OUTPUT
          
          docker login ${LOGINSERVER} --username 00000000-0000-0000-0000-000000000000 --password-stdin <<< $TOKEN

      - name: Install pack CLIs including pack and yq
        uses: buildpacks/github-actions/setup-pack@v5.0.0
        with:
          pack-version: '0.29.0'

      - name: Set the image name and version
        id: versioning
        run: |
          VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          REPO_NAME=${{ github.event.repository.name }}
          echo "IMAGE=$REPO_NAME:$VERSION" >> $GITHUB_ENV
          echo "IMAGE=$REPO_NAME:$VERSION" >> $GITHUB_OUTPUT

      - name: Pack build
        run: |
          pack build ${LOGINSERVER}/${IMAGE} --builder paketobuildpacks/builder:base --buildpack paketo-buildpacks/java-azure --env BP_JVM_VERSION=17 --publish

  deployment:
    name: Deploy image to AKS
    needs: container
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: 'Az CLI Login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}

      - uses: azure/setup-kubectl@v3
        name: Setup kubectl

      - name: Setup kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.29'

      - name: Set AKS context
        id: set-context
        uses: azure/aks-set-context@v3
        with:
          resource-group: 'sandbox-rg'
          cluster-name: 'rbac-cluster'
          admin: 'false'
          use-kubelogin: 'true'

      - name: Deploy image using Kustomize
        env:
          IMAGE: ${{needs.container.outputs.IMAGE}}
          LOGINSERVER: ${{needs.container.outputs.LOGINSERVER}}
        run: |
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
          cd k8s
          kustomize edit set image cicd-java=${LOGINSERVER}/${IMAGE}
          kustomize build . | kubectl apply -f -
